import java.util.ArrayList;

/*
 Finding whether the number exists or not using linear search (Recursion) with ArrayList inside the function body
 */
public class Main {
    public static void main(String[] args) {
        int[] arr = { 1,4,17,3,8,17,23,17,17};
        int target = 17;
        System.out.println(findAllIndex2(arr, target, 0));
    }
    /*
    Goal : * Return the list
           * Don't take it in argument
    Challenge : * return type will be the ArrayList
    problem : *Every Call will have a new List(Different Object).
              *If an index for the function call is added to the list,
              it will be available only for that function call
              *Value of the last recursive call will be returned to the previous call as it is.
              For instance,
       static ArrayList<Integer> findAllIndex2(int[] arr, int target, int index){
        ArrayList<Integer> list = new ArrayList<>();
        if(index == arr.length)
            return list;

        // This will contain the answer for that function call only
        if(arr[index] == target) {
            list.add(index);
        }
        return findAllIndex2(arr, target, index+1);
    }
    *This will return the empty list as the last function call returns the empty list to its previous call.
    *To overcome this, whenever we are returning the answer from the below function calls, while doing so
     check the current some answer.And add those answers also to the list.
     */
    static ArrayList<Integer> findAllIndex2(int[] arr, int target, int index) {
        ArrayList<Integer> list = new ArrayList<>();
        if (index == arr.length)
            return list;

        // This will contain the answer for that function call only
        if (arr[index] == target) {
            list.add(index);
        }
        ArrayList<Integer> ansFromBelowCalls = findAllIndex2(arr,target,index+1);
        list.addAll(ansFromBelowCalls);
        return list;
    }
}
